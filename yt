javascript is a high-level programming language 
primarily used for creating interactive and dynamic web pages
javascript runs on the client side ,and executed by the user's web browser
computer --> machine understand language --> binary code --> 
programming language --> machine will not understand
what we wrote --> using browser --> browser have javascript engine
what we wrote --> it will convert into binary code --> it will input to the computer
computer --> process that code --> it will display the output 

programming languages --> like C ,C++,java,python(general purpose programming language)
difference between them 
javascript --> client side programming language 

 C ,C++,java,python(general purpose programming language)
difference between them  --> we can't see the output directly
If u want to see these outputs javascript is necessary
javascript take help by browser to display the content
javascript --> outputs --> we can see immediately --> in the browser

Advantages in javascript
we can create full stack application(frontend and backend)  by using javascript
we can develop web application and mobile application by using javascript
(indeed) --> job portal

javascript libraries & framw works 

1) front end library
react
angular
vue
react native

2) backend
ExpressJS
NextJs
GatsbyJs
NuxtJs

how to add javascript -->
InPage javascript
<script>
   alert("Welcome everyone");
</script>
External file javascript
alert is global function

datatypes
primitive data type
String  -- "this is text message"
var a = ""this is text message" 


Number
console.log(10,20,30);


Boolean = true,false
test = 10>20
console.log(test)
false
if you want to see in web page  document.write("This is javascript text message<br><br>")
document.write(1234567890)
document.write("<h1> This is Heading Text </h1> <br>")


Null
let sampleView = null;
console.log(sampleView); //null

undefined
let apple;
console.log(apple);
// undefined 

complex data type
Array
[] --> Array
Object
{
color : "red" //key pair value
}

let fruits = ["apple","mango",55,{name:"mouni"}]
console.log(fruits)
array -- zero indexed based

const games = {
  cricket: "Dhoni", //key pair values
  football: "racer"
}
console.log(games)
console.log(typeof(games))  --//object
console.log(typeof(fruits)) -- //object

everything in javascript --> is object
console.log(Array.isArray(fruits)) --true

Operators
  Airthmetic operators
  Assignment Operators
  Comparison Operators
  Logical Operators

 Airthmetic operators
1)Addition
2)Subtraction
3)Multiplication
4)Divison
5)Remainder
6)Increment
7)decrement

var a = 30;
var b = 20;
document.write(a+b);

var a = 30;
var b = 20;
document.write("Result: ",a+b);
document.write("Result: ",a-b);
document.write("Result: ",a*b);
document.write("Result: ",a/b);
document.write("Result: ",a%b);

var a = 60;
a++;

var b = 16;
b++;

document.write("Result: ",a)

Control flow & Conditional statements
if 
if-Else
if Else-if
Switch
var game = "Cricket"
let captain = "Dhoni"
if(game == "Cricket") {
document.write("Match Captian is",captain);
}
if(game == "cricket") {
document.write("Match Captian is",captain);
} --> It is failed

if(game == "cricket") {
document.write("Match Captian is",captain);
}
else {
document.write("Sorry Wrong answer");
}

0/p: Sorry wrong answer

var game = "Cricket"
let captain = "Dhoni"
const tennis = "Sania"
if(game == "cricket") {
document.write("Match Captian is",captain);
}
else if(tennis == "Sania"){
   document.write("Correct")
}
else {
document.write("Sorry Wrong answer");
}

var x = 100;
var y = 50;
var z = 200;

if(x !== y) {
 document.write("x is equal to y");
}
else if(y < z){
 document.write("blue color");
}
else if(z > x) {
document.write("Yellow color")
}
else {
document.write("All wrong statements");
}


Logical Operator

1) logical NOT '!'
2) Logical AND  '&&'
3) logical OR   '||'

&&
t t t
t f f
f t f
f f f

||
t t t
t f t
f t t
f f f

if(x !== y && y < z) {
  document.write("yes correct answer");
}
else {
document.write('wrong answer")
}

Ternary Operator

document.write(2+3 == 5 ? "YES CORRECT ANSWER" : "no WRONG ANSWER")

var x = 100;
var y = 50;

x < y ? document.write("color is green") : document.write("color is red")

//dialog box

alert
prompt
confirm

alert("This is an alert)
prompt("please enter your keyword")
confirm("Are you sure")

if(10<20) {
alert("10 is less than 20')
}

var woman = confirm("Are you a woman") //everytime page loaded we will get that dialog

if(woman) {
let name = prompt("Please enter your name");
document.write("Hello Madam. " + name + "Welcome to my page")
}
else {
let name= prompt("Please enter your name");
document.write("Hello Mr. " + name + "Welcome to my page")
}

Type Conversion

var a = "55";
var b = 44;

document.write(typeof(a)); --> string

var z = parseInt(a)
document.write(typeof(z))

var x = String(b)
document.write(typeof(x) + "<br>")
document.write(typeof(z))

Switch case 

switch(expression) {
case value1:
       statement
        break;
case  value 2:
    statement;
break;
default:
    default statement
    break;
}

switch(true) {
 case  10>20 : myexpression = "red color"
  break;
 case  20<30:  myAnswer = "green color"
  break;
 case  50>20: myAnswer = "black color"
  break;
case 100==200: 
   myanswer = "orange color"
  break;
default: 
   myanswer = "none of the above"
  break;
}
document.write(myAnswer)

//student results

let Name=prompt("Please enter your name");
let Marks = prompt("PlEASE ENTER YOUR MARKS");
switch(true) {
 case  Marks>90&& Marks<=100 :  result = "Great you are the topper"
  break;
case  Marks>65&& Marks<=90 :  result = "Congratulations you got First class"
  break;
 case  Marks>=40&& Marks<65 :  result = "you got second class"
  break;
case Marks>=30&& Marks<=40 :  result = "You got third class": 
  break;
default: 
   result = "Please enter your marks"
  break;
}

document.write("Hello" + Name + + "<h2>" + result + "</h2>")
      

functions
function block /function body

function apple() {
document.write("Hello world" + "<br>")
}
apple(); --> we have to give parenthesis


Scopes
global scope
function scope
block scope

Types of variables 

1)Var 
2)let
3)Const

Global scope
var Apple = "red";
let Orange = 'Yellow';
const banana = "green"

function fruit() {
document.write(Apple);
document.write(Orange);
document.write(Banana);
}
fruit()

function scope
var Apple = "red";
let Orange = 'Yellow';
const banana = "green"

function fruit() {
    var x = 100;
    let y = 200;
    const z = 'mahesh';
document.write(x);
document.write(y);
document.write(z);
}
fruit()

function fruit() {
    var x = 100;
    let y = 200;
    const z = 'mahesh';

}
document.write(x);
document.write(y);
document.write(z);
//if we print outside the function we got error



//Block scope

function sports(){
  if(10<20) {
  var tennis = "sania"
  let cricket = "virat"
  const ground =  "stadium"
  document.write(cricket)
  document.write(ground)
   }
  document.write(tennis) 
}
sports()

let and const --> block scoped --> if u try to print outside the block 
we will get error
tennis is function scoped

global scope --> anywhere that variable we can use that variable anywhere
function scope --> Inside function we declare variables we can use in function only wecan't use outside
block scope --> Inside block we declare variables we can use in block only wecan't use outside  
which varaibles we declare with let and const , outside the block it will not work
but if we declare with var --> it will work outside block also.

function expression

var a = function apple() {
 document.write("Red in  color");
}
a();

Anonymous function --> without function name
var b = function () {
 document.write("This is Anonymous function");
}
b();

//function with parameters and return value
function score(a,b) {
 return a+b+"<br>"
}

document.write(score(10,20))

function game(x,y) {
return document.write("I like" + x + "and " + y)
}

game("Cricket","Football");

var userName= prompt(please enter your name")
function guest(myFriend){
return document.write("Hello welcome" +myFriend )
}
guest(userName);


Methods

ArrayMethods
StringMethods
ObjectMethpds

Array methods 

push()
pop()
shift()
unshift()
concat()
join()
slice()
splice()
indexOf()
forEach()

let collections = ["akash",55,true,{name:"Pratap"}]
push() = ("Adds one or more elements to the end of the array and returns the new length.")
let sports = ["cricket","football"]
sports.push("socker",68)
document.write(sports+ "<br>")
document.write(sports.length + "<br>")


pop method
pop() = removes the last element from an array and returns that element")

let books = ["Maths","Physics","chemistry"]
let a = books.pop()


document.write(books + "<br>") ==> maths,physics
d
document.write(a)

shift method=(removes the first element from an array and returns that element)

let states = ["hyd","mumbai","delhi"]
states.shift();
document.write(states)
mumbai,hyderbad

unshift = ('Adds one or more elements to the begining of an array and returns the new length")
let scores = [22,56,89,105,"amar"]
scores.unshift("suresh",26);
document.write(scores+"<br>")

concat() = ("combines two or more arrays and return a new array")
let scores = [11,22,33,44]
let players = ["amith","suresh","mahesh"]

let newPlayers = scores.concat(players)
document.write(newPlayers)

join() ==> creates a new string by concatening all the elemnts 
of an array and returns a string by a specified seperator

var team = [10,20,30,"sunil","anil","madhav"]
var myTeam = team.join("")
document.write(myteam)

var team = [10,20,30,"sunil","anil","madhav"]
var myTeam = team.join("/")
document.write(myteam)

Slice method -->
slice() = returns a shallow copy of a portion of an array into a new array

let students = ["anil","balu","karthik",10,20,30,40,50]
let myStudents = student.slice(0,4)
document.write(myStudents) --> anil,balu,karthik

splice method
splice() = changes the contents of an array by removing ,replacing , or adding
let myNUmbers = [0,1,2,3,4,5,6,7,8]
let myNewNUmbers = myNumbers.splice(0,5) 
document.write(myNumbers + "<br>" myNewNumbers)
myNumbers --> 0,1,2,3,4
MyNewNumbers --> 5,6,7,8

let myNUmbers = [0,1,2,3,4,5,6,7,8]
let myNewNUmbers = myNumbers.splice(0,4,"something to see") 
document.write(myNumbers + "<br>")
document.write(myNewNumbers)
myNumbers --> something to see 4,5,6,7,8
MyNewNumbers --> 0,1,2,3


let myNUmbers = [0,1,2,3,4,5,6,7,8]
let myNewNUmbers = myNumbers.splice(4,1,"Stars in sky") 
document.write(myNumbers + "<br>") // 0 ,1 ,2,3, stars in the sky,5,6,7,8
document.write(myNewNumbers) // 4

let myNUmbers = [0,1,2,3,4,5,6,7,8]
let myNewNUmbers = myNumbers.splice(4,3,"Stars in sky") 
document.write(myNumbers + "<br>") //  0,1,2,3,Stars in sky , 7 , 8
document.write(myNewNumbers) // 4 5 6

let myNUmbers = [0,1,2,3,4,5,6,7,8]
let myNewNUmbers = myNumbers.splice(3,1,"Added Value") 
document.write(myNumbers + "<br>") //  0,1,2,Added Value,4,5,6 7 , 8
document.write(myNewNumbers) // 3

IndexOf() = Returns the first index at which a given element can be found in the array , -1 if it is not present

let students = ["Anil","Banti","Suresh","Girish"]
document.write(students.indexOf("Suresh")) --> 2
document.write(students.indexOf("Ramesh")) --> -1

var newStudent = students.indexOf("Satish")
if(newStudent == -1) {
students.push("Satish")
}
document.write("students")

forEach() = "Executes a provided function  once for each array element)

let scores = [10,20,30,40,50,60]
let students = ["Suresh","murali","mouni","kesava"]

document.write(students) // Suresh,murali,mouni,kesava 
document.write(students + "<br>") It will continue in row but will not form column

students.forEach(function(item,index) { // item will travel on array
     document.write(index+1 + "." +item+"<br>") // sureshmuralimounikesava
})
1.Suresh
2.murali
3.nagaraju
4.harish

if we call one method in another function 
that process is called callback function

callback function: A function called as a paramater inside a function or method is called
callback function

let scores = [10,20,30,40,50,60]
scores.forEach(function(item){
  document.write(item*2 + "<br>")
 }) 
     
Multi dimension Array

let students = ["anil","sunil","banti"]
document.write("My student is:",students[2])

let marks = [
    [10,20,30],
    [40,50,60,70],
    [80,90,]
    [100,110,120,140]
]
document.write(marks[1][1])
document.write(marks[3][3])

String methods()
  split()
  replace()
  trim()
  toUpperCase()
  charAt()
  toLowerCase()
  substring()

split() -- 

var sample = "This is a string sample text"

document.write(sample.split(""))

//T,h,i,s, i , s a , s, t,r,i,n,g,s,a,m,p,l,e,t,e,x,t -- string is converted to array
document.write(sample.split(" "))
[this,is,a,string,sample,text]

var student = "      ramesh     "
document.write(student)
console.log(student.trim())

var student = "ramesh"
charAt() --> document.write(student.charAT(5));
substring()
let str = "Hello, World!"
let result = str.substring(7,5) //world
replace() --
let str = "Hello,world!"
let newString = str.replace("world","Javascript")
console.log(newStr) //Hello javascript
toUpperCase() -
let text = "Hello World!"
let result = text.toUpperCase();HELLO WORLD

let text = "Hello World!"
let result = text.toLowerCase();
console.log(result) / hello world

loops
-- Repetition and automation
    Iterating over data
    control flow
    data manipulation

loops five types

--> for
   while 
   do-while
   forEach
   for-In

  for(a=5;a<=10;a++/a--) 
Initialization
Condition
Increment or decrement

for(var a=0;a<10;a++) {
  document.write('I love India" + "<br>");
}

Methods 

getElementById()
getElementsByClassName()
getElementsByTagName()
querySelector()
querySelectorAll()
setAttribute()
removeAttribute()

properties

innerText
innerHTML
textContent
value
name
attributes
getAttribute
setAttribute




document.getElementById("company")

document.getElementsByClassName("nav-left")

document.getElementsByTagName("nav")

In css

#company {
   color: blue;
}


QUERYSELECTOR

document.querySelector("#company")

query selectors --> we pass --> css selectors



const newCompany = document.querySelector("#company") here company is id 

newCompany.textContent = "Amazon"





const newCompany = document.querySelector(".nav-left")  // here we select      								the class

newCompany.textContent= "Flipkart"




const newCompany = document.querySelector("div") //It will select first 							element

newCompany.textContent = "Jio Mart"


const newCompany = document.querySelectorAll("li") //It will give all list 							of all li tags
for(let x=0;x<newCompany.length;x++) {
  newCompany[x] .textContent = "Employees" 
} // wherever li tags it will changed to employees

If I want to change only customers --> 

const newCompany = document.querySelectors(".customers")
for(let x=0;x<newCompany.length;x++) {
  newCompany[x] .textContent = "Employees" 
} //wherever customers is there it will replace to employees



<p> This is a result: <span style="display:none;">Success </span> fail</p>



const targetHidden = document.querySelector("p")
console.log(targetHidden.innerText) --> if we use this it will select both 					text and css


const targetHidden = document.querySelector("p")
console.log(targetHidden.textContent) --> if we use this it will select 						only text 



Attributes

Types of HTML ATTRIBUTES

href Attribute,
width and height Attribute
src Attribute
id Attribute
class Attributes
style attribute
alt Attribute
lang attribute
dir attribute

<header id="headerId" class="headerClass" style="color:transparent" href="/">

const targetingAtt = document.querySelector("header").attributes 
console.log(targettingAtt);
it will give all attributes in header

const targetingAtt = document.querySelector("header").attributes.id
console.log(targettingAtt);

//it will give attribute of id


const targetingAtt = document.querySelector("header").attributes.id.value
console.log(targettingAtt);

//it will give value  of id


const targetingAtt = document.querySelector("header").attributes.id.name
console.log(targettingAtt);

//it will give vid


const targetingAtt = document.querySelector("header").attributes.class.name
console.log(targettingAtt);

//it will give class

const targetingAtt = document.querySelector("header").attributes.class.value
console.log(targettingAtt);

//it will give headerClass

const targetingAtt = document.querySelector("header").attributes.style.value
console.log(targettingAtt);

//it will give color:transparent



const targetingAtt = document.querySelector("header").attributes.href.value
console.log(targettingAtt);

//  /



setAttribute()

const  targetNav = document.querySelector("nav")

targetNav.setAttribute("style","border:5px solid black"))



const targetSide = document.querySelector(".sidenav")

targetSide.setAttribute("style","background-color: green")



removeAttribute()

const targetRemove = document.querySelector(".main")

targetRemove.removeAttribute("class")

CSS in js

document.querySelector("header").style.backgroundColor = "red"



Events & Event Listeners


1) Mouse Events 

click
dbclick(double click)
mouseover
mouseout
mouseenter
mouseleave
mousedown
mouseup


2)keyboard Events

keydown
keyup
keypress

3)Form Events
submit
reset
focus
blur
change
input

Events 

const darkTheme = function() {
document.querySelector("body").style.backgroundColor = "black"
document.querySelector(".dark-theme").textContent = "Light Theme"
document.querySelector("header").style.backgroundColor="#2E282A"
document.querySelector(".sidenav").style.backgroundColor="#808A9F"

}
<div class="dark-theme" onclick=darkTheme() ondblclick=lightTheme()>
DarkTheme
</div>

function eleHover(element){
element.style.backgroundColor = "yellow"
}

<div class="main">
<div class="section revenue" onmouseover="eleHover(this)" onmouseout="eleOut(this)">
<h2 class="customers">Customers</h2>
</div>

this will represent that particular element

event --> we write in particular element we write the event and we assign to the function 


event listeners


two ways

1)getElementById("exampleId").onclick = functionName

function functionName(){
exampleId.style.backgroundColor="red"
}

2)addEventListeners

getElementById("exampleId").addEventListener('click',functionName)

function functionName(){
exampleId.style.backgroundColor="red"
}


const sideNavBar = document.querySelector(".sidenav")
const mainSection = document.querySelectorAll(".main.section")

loginButton.onclick = showLogin

function showLogin() {
sideNavBar.style.display="None"
mainSection.forEach(function(item) {
 item.style.display = "none"
})
loginModal.style.display = "block"
}


document.getElementById("closeBtn").addEventListener('click',hideLogin)


 function hideLogin() {
sideNavBar.style.display = "block"
mainSection.forEach(function(item) {
item.style.display = "block"
}}
loginModal.style.display = "none"
}

for addeventListeners no need to write on 
normal events we have to write on


document.getElementById("loginSubmit").addEventListener('mouseover',
function() {
this.style.backgoundColor='green'
})

document.getElementById("loginSubmit").addEventListener('mouseout',
function() {
this.style.backgoundColor='#1768AC'
})

<button id="add-border">Add border</button>
const Navborder = getElementById("add-border")
NavBar.addEventListener("click",addingBorder)

function addingBorder() {
document.querySelector("header").style.border="5px solid black"
}

if(10<20)
{
NavBorder.removeEventListener("click",addingBorder)
}


FormEvents

<form id="myForm">
<label for="nameInput">Name:</label>
<input type="text" id=nameInput" placeholder="Enter your name">
<button type="submit">Submit</button>
</form>
<div class="user-details">
<h3>UserDetails:</h3>
<h2 id="name" style="color:blue"></h2>
</div>


const mainForm = document.getElementById("myForm")
const username = document.getElementById("nameInput")
const inputName= document.getElementById("name")


mainForm.addEventListener('submit',function(e) {
e.preventDefault() --> when we enter the data when we click submit it will 				load the page , and data will remove
const myUserName = username.value
inputName.textContent = myUserName


mainForm.reset()
})

focus and blur


const userInput = getElementById("nameInput")
userInput.addEventListener("focus",function(event) {
        console.log(event. target) //when we pass the target it will return the element
})

const userInput = getElementById("nameInput")
userInput.addEventListener("focus",function(event) {
event.target.style.backgroundColor='pink'   
      })


const userInput = document.getElementById("nameInput")
userInput.addEventListener("blur",function(event) {
event.target.style.background = ''

})



<select id="myColors">
   <option value="red">Red</option>
   <option value="green">Green</option>
   <option value="blue">Blue</option>
</select>

<div id="box">
  
</div>

#myColors {
  width:200px;
  font-size:large; 
  margin-left:300px;
}
#box{
  width:200px;
  height:200px;
  border: 1px solid gray;
  margin-left:500px;
}

const myNewColors = document.getElementById("myColors")
const myNewBox = document.getElementById("box")

myNewColors.addEventListener("change",function() {
  myNewBox.style.background = myNewColor.value
}) //which color we select it will display in box

myNewColors.addEventListener("change",function() {
  myNewBox.textContent = myNewColor.value
})which color  we select that text   will display in box 

//

input event

mainForm.addEventListener('input',function(e){
  e.preventDefault
  const myUserName = username.value;
  inputName.textContent = myUserName

})


ClassList

classList is a property of DOM elements that represents a collection of classes applied to the element.

methods --> add --> To element it will add a new class 
             remove --> it will remove existing element and it will remove  
                        add element
             toggle  --> if once click ->it will show other time we click 			it will hide
             

            contains ---> whatever we assumed that class will be there in 
                          classList --> return true
                          or else false

             replace  --> it will the replace the class with existing class



<button id="open">Open Sidebar</button>
<button id="close">Close Sidebar</button>

const openNav = document.getElementById("open")
const closeNav = document.getElementByID("close")

const sideNavBar = document.querySelector(".sidenav")

closeNav.addEventListener('click',closeSideNavBar) 

function closeSideNavBar(){
 sideNavBar.classList.add("apple")
 document.querySelector(".apple").style.display='none'
}

openNav.addEventListener('click',openSideNavBar)
function openSideNavBar() {
sideNavBar.style.display = 'block'
}


Remove 

const openNav = document.getElementById("open")
const closeNav = document.getElementByID("close")

const sideNavBar = document.querySelector(".sidenav")

closeNav.addEventListener('click',closeSideNavBar) 

function closeSideNavBar(){
 sideNavBar.classList.remove("sidenav") //It will remove the class
}


ToggleList

const openNav = document.getElementById("open")
const closeNav = document.getElementByID("close")

const sideNavBar = document.querySelector(".sidenav")

closeNav.addEventListener('click',closeSideNavBar) 

function closeSideNavBar(){
 sideNavBar.classList.toggle("mango") //when we click first time it will show  sidenavbar , when we click secondtime it will not show sidenavbar
because of toggle it will add class sidenavbar mango , bcoz of mango we kept display: none that sidebar will not display
}

.mango {
  display:none;
}


Contains 

The classList.contains method in JavaScript is used to check if an element contains a specific class. It returns true if the class is present and false otherwise.

Example

const div = document.querySelector('div');
console.log(div.classList.contains('secondary')); // true


replace

Date method

var Example = new Date()

 getDate()
 getMonth()
 getFullYear()
 getHours()
 getMinutes()
 getSeconds()

setDate()
setMonth()
setFullYear()
setHours()
setMinutes()
setSecinds()


Date method 

var example = new Date()

const today = new Date()
document.write(toDay.getDate())
document.write(toDay.getMonth()+1) --> zeroIndexed
document.write(toDay.getfullYear()) --> 2023

const toDay = new Date()
toDay.setDate(10)
toDay.setMonth(10)
toDay.setFullYear(2024)

Math Methdos

.Math() --> min ,max ,random

Math.ceil()
Math.floor()
Math.round()
Math.max()
Math.min()
Math.random()

const calculation = Math.ceil(10.01) --> // 11
document.write(calculation)

const calculation = Math.floor(10.53) --> // 10
document.write(calculation)

const calculation = Math.floor(-10) --> // 10
document.write(calculation)

const calculation = Math.floor(10.01)
document.write(calculation) --> 10

const calculation = Math.floor(11.99)
document.write(calculation) --> 11


const calculation = Math.round(11.53) //It will more than 50
document.write(calculation) --> 12


const calculation = Math.max(12,55,890,558,2)
document.write(calculation) --> 890


const calculation = Math.min(12,55,890,558,11545)
document.write(calculation) --> 12

const calculation = Math.random()*10
document.write(calculation) 

const calculation = Math.floor(Math.random()*10)+1
document.write(calculation)


Objects

what are objects-->data type

array is started with square brackets
const sampleArray = ["Apple","Mango","Banana",true,55]
document.write(sampleArray[1])

const capitals = {
   India: "New Delhi",
   Telangana:"Hyderabad",
   maharstra: "Mumbai",
   location:function() {
   return "I live in "+ this.telangana
   }
}
capitals.maharastra = "Bombay"
document.write(capitals.maharastra)

capitals.area = "Ameerpet"

const fruits = new Object()
console.log(fruits)//object

fruits.apple = "red"
fruits.mango = "yellow"

console.log(fruits)

document.write(fruits.apple)

Set and clear Intervals

setInterval() --> when we want to perform a task at particular 			time it will be useful

setInterval(functionName,milliseconds)

1000ms = 1sec

const Animator = setInterval(sampleAnimation,1000ms)
let a = 0;
function sampleAnimation(){
   a = a+1;
   if(a == 5) {
   const textAnimation = document.getElementById("title")
   textAnimation.style.fontsize = a + "rem"
   }
}

const Animator = setInterval(sampleAnimation,1000ms) //how much time we pass that much time , function will perform)
let a = 0;
function sampleAnimation(){
   a = a+1;
   if(a == 5) {
    clearInterval(Animator)
   } else{
   const textAnimation = document.getElementById("title")
   textAnimation.style.fontsize = a + "rem"
  }
}

set & clear Timeouts

setTimeout()
setTimeout(functionName,milliseconds) //we delay the action

const changer = setTimeout(function(){
    const myElement = document.getElementById("title")
    myElement.style.color = "red"
     myElement.style.fontSize="5rem"
},5000)

clearTimeout(identifier)


<button id="stop" onclick="stopAction()">Stop Action</button>


function stopAction() {
clearTimeout(changer)
}


























 

    







   













































































































